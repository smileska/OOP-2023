// #include<iostream>
// #include<cstring>
// using namespace std;

// class UserAlreadyExistsException {
// protected:
//     char username[50];
// public:
//     UserAlreadyExistsException(char *user){
//         strcpy(username,user);
//     }
//     void showMessage() {
//         cout<<"User with username "<<username<< " already exists!"<<endl;
//     }
// };

// class UserNotFoundException {
// protected:
//     char username[50];
// public:
//     UserNotFoundException(char* user) {
//         strcpy(username, user);
//     }

//     void showMessage() {
//             cout << "User with username " << username << " was not found!" << endl;

//     }
// };

// class FriendsLimitExceededException {
// public:
//     void showMessage(int limit) {
//         cout << "Can't have more than " << limit << " friends." << endl;
//     }
// };

// class User {
// private:
//     char username[50];
//     int age;
//     int friends;
//     static int limit;
// public:
//     User(char *username = "", int age = 18) : age(age) {
//         strcpy(this->username, username);
//         friends = 0;
//     }

//     friend ostream &operator<<(ostream &os, const User &user) {
//         os << "Username: " << user.username << " Age: " << user.age << " # of friends: "<<user.friends;
//         return os;
//     }

//     User &operator++() {
//         if (friends >= limit) {
//             throw FriendsLimitExceededException();
//         }
//         ++friends;
//         return *this;
//     }

//     friend class SocialNetwork;

//     char *getUser() {
//         return username;
//     }
//     static void setLimit(int l) {
//         limit=l;
//     }
//     static int getLimit(){
//         return limit;
//     }
// };
// int User::limit=3;
// class SocialNetwork {
// private:
//     User *users;
//     int n;
// public:
//     SocialNetwork() {
//         n = 0;
//         users = new User[n];
//     }

//     SocialNetwork &operator+=(User &u) {
//         for (int i = 0; i < n; i++) {
//             if(strcmp(u.getUser(),users[i].getUser())==0) {
//                 throw UserAlreadyExistsException(u.username);
//             }
//         }
//         User *tmp = new User[n + 1];
//         for (int i = 0; i < n; i++) {
//             tmp[i] = users[i];
//         }
//         tmp[n++] = u;
//         delete[] users;
//         users = tmp;
//         return *this;
//     }

//     void friendRequest(char *firstUsername, char *secondUsername) {
//         bool firstUserFound = false;
//         bool secondUserFound = false;
//         for (int i = 0; i < n; i++) {
//             if (strcmp(users[i].username, firstUsername) == 0) {
//                 firstUserFound = true;
//                 for (int j = 0; j < n; j++) {
//                     if (strcmp(users[j].username, secondUsername) == 0) {
//                         secondUserFound = true;
//                         int f1=users[i].friends;
//                         int f2=users[i].friends;
//                         try {
//                             ++users[i];
//                             ++users[j];
//                             break;
//                         } catch (FriendsLimitExceededException& ex) {
//                             ex.showMessage(User::getLimit());
//                             users[i].friends=f1;
//                             users[i].friends=f2;
//                         }
//                     }
//                 }
//                 break;
//             }
//         }
//         if (!secondUserFound) {
//             throw UserNotFoundException(secondUsername);
//         }
//         else if (!firstUserFound) {
//             throw UserNotFoundException(firstUsername);
//         }
// //        if (!firstUserFound && !secondUserFound) {
// //            throw UserNotFoundException(secondUsername, true);
// //        }
//     }


//     friend ostream &operator<<(ostream &os, const SocialNetwork &network) {
//         os << "Users: " << endl;
//         for (int i=0;i<network.n;i++) {
//             os << network. users[i] << endl;
//         }
//         return os;
//     }
// };


// int main() {
//     SocialNetwork sn;
//     int n;
//     cin >> n;
//     for (int i = 0; i < n; i++) {
//         char username[50];
//         int age;
//         cin >> username >> age;
//         User u(username, age);
//         try {
//             sn += u;
//         }
//         catch (UserAlreadyExistsException ex) {
//             ex.showMessage();
//         }

//     }

//     cout << "Registration of users " << endl;
//     cout << sn << endl;
//     cout << "Friend requests " << endl;

//     int friendships;
//     cin >> friendships;
//     for (int i = 0; i < friendships; i++) {
//         char username1[50], username2[50];
//         cin >> username1 >> username2;
//         try {
//             sn.friendRequest(username1, username2);
//         }
//         catch (UserNotFoundException &e) {
//             e.showMessage();
//         }
//         catch (FriendsLimitExceededException &k) {
//             k.showMessage(User::getLimit());
//         }
//     }

//     cout << sn << endl;

//     cout << "CHANGE STATIC VALUE" << endl;

//     int maxFriends;
//     cin >> maxFriends;
//     cin >> friendships;
//     User::setLimit(maxFriends);
//     for (int i = 0; i < friendships; i++) {
//         char username1[50], username2[50];
//         cin >> username1 >> username2;
//         try {
//             sn.friendRequest(username1, username2);
//         }
//         catch (UserNotFoundException &e) {
//             e.showMessage();
//         }
//         catch (FriendsLimitExceededException &k) {
//             k.showMessage(User::getLimit());
//         }
//     }
//     cout << sn;
// }